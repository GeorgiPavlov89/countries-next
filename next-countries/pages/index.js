import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/Home.module.css'
import SearchAndDropDown from '../components/SearchAndDropDown'
import dynamic from "next/dynamic"
import { useEffect, useState, useRef, useCallback } from "react"
import Error from "../components/Error"

const defaultEndpoint = 'https://restcountries.com/v3.1/all'

export async function getServerSideProps() {
  const res = await fetch(defaultEndpoint)
  const data = await res.json()

  return {
    props: {
      data

    }
  }
}



const regions = [
  {
    id: 1,
    value: "Africa"
  },
  {
    id: 2,
    value: "America"
  },
  {
    id: 3,
    value: "Asia"
  },
  {
    id: 4,
    value: "Europe"
  },
  {
    id: 5,
    value: "Oceania"
  },
]

const Header = dynamic(() => import("../components/Header"), { ssr: false })

export default function Home({ data }) {



  const searchRef = useRef(null)
  const [results, setResult] = useState(data)
  const [search, setSearch] = useState('')
  const [selectRegion, setSelectRegion] = useState('')
  const [isLoading, setLoading] = useState(false)

  const [theme, setTheme] = useState('light')


  function handleSearch() {
    setSearch(searchRef.current.value)

  }

  useEffect(() => {
    const newCountry = data.filter(country => country.name.common.toLowerCase().includes(search.toLocaleLowerCase()))
    const newCountryRegion = data.filter(country => country.region.toLowerCase().includes(selectRegion.toLocaleLowerCase()))
    const countryInRegion = newCountryRegion.filter(country => country.name.common.toLocaleLowerCase().includes(search.toLocaleLowerCase()))

    if (selectRegion) {
      setResult(countryInRegion)
      setLoading(true)
    } else if (selectRegion) {
      setResult(newCountryRegion)
    } else if (search) {
      setResult(newCountry)
    }
    else {
      setResult(data)
    }


  }, [selectRegion, search])

  console.log(results)

  const switchTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
  }


  return (
    <div className={styles.container} data-theme={theme}>
      <Head>
        <title>Rest Countries</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Header
          theme={theme}
          switchTheme={switchTheme}
        />

        <div className={styles.grid}>

          <SearchAndDropDown
            title={selectRegion}
            regions={regions}
            handleSearch={handleSearch}
            searchRef={searchRef}
            setSelectRegion={setSelectRegion}
            results={results}
            setResult={setResult}
          />

          {

            results.length > 0 ? results.map(({ index, name, flags, population, region, capital, borders, currencies, subregion, languages, tld }) => {
              return (

                <div key={name.common} className={styles.card}>

                  <Link href={{
                    pathname: `/country/[country]`,
                    query: {
                      index: index,

                    },
                  }}
                    as={`/country/${name.common}`}>
                    <div>
                      <div className={styles.image}>
                        <Image src={flags.svg} width="300px" height="200px" layout="responsive" objectFit="cover" alt="country flag" />
                      </div>
                      <div className={styles.cardInfo}>
                        <div className={styles.info}>
                          <h3>{name.common}</h3>
                          <p><span> Population:</span> {population}</p>
                          <p><span>Region:</span> {region}</p>
                          <p><span> Capital:</span> {capital}</p>
                        </div>
                      </div>
                    </div>
                  </Link>
                </div>

              )
            })
              : <Error isLoading={isLoading} />
          }

        </div>
      </main>


    </div>
  )
}
